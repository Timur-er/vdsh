{"ast":null,"code":"import { getRopesOrder } from \"./selectors\";\nimport { addRopeToOrder } from \"./actions\";\nexport const addRopeOrder = (color_id, quantity, ropesOrder) => dispatch => {\n  if (ropesOrder) {\n    const order = {};\n    dispatch(addRopeToOrder(color_id, quantity));\n  }\n};\nexport const ropesOrderOperation = (order, quantityAction, color_id, quantity) => dispatch => {\n  switch (quantityAction) {\n    case 'increment':\n      console.log(order);\n      const prevOrder = order.filter(item => {\n        return item.color_id === color_id;\n      });\n      const newOrder = [...prevOrder, {\n        color_id,\n        quantity\n      }]; // dispatch(addRopeToOrder(newOrder));\n      // order.forEach(item => {\n      //     if (item.color_id === color_id) {\n      //         console.log('remove');\n      //\n      // dispatch(addRopeToOrder({color_id, quantity}))\n      // }\n      // })\n      // dispatch(addRopeToOrder({color_id, quantity}))\n\n      console.log('+');\n      return;\n\n    case 'decrement':\n      console.log('-');\n      return;\n\n    case 'input':\n      console.log('+-');\n      return;\n\n    default:\n      return;\n  }\n};","map":{"version":3,"sources":["/Users/etimur/Desktop/vdsh/client/src/store/ropesOrder/operations.js"],"names":["getRopesOrder","addRopeToOrder","addRopeOrder","color_id","quantity","ropesOrder","dispatch","order","ropesOrderOperation","quantityAction","console","log","prevOrder","filter","item","newOrder"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,aAA5B;AACA,SAAQC,cAAR,QAA6B,WAA7B;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,UAArB,KAAoCC,QAAQ,IAAI;AACxE,MAAID,UAAJ,EAAgB;AACZ,UAAME,KAAK,GAAG,EAAd;AACAD,IAAAA,QAAQ,CAACL,cAAc,CAACE,QAAD,EAAWC,QAAX,CAAf,CAAR;AACH;AACJ,CALM;AAOP,OAAO,MAAMI,mBAAmB,GAAG,CAACD,KAAD,EAAQE,cAAR,EAAwBN,QAAxB,EAAkCC,QAAlC,KAA+CE,QAAQ,IAAI;AAE1F,UAAQG,cAAR;AACI,SAAK,WAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,YAAMK,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAcC,IAAD,IAAU;AACrC,eAAOA,IAAI,CAACX,QAAL,KAAkBA,QAAzB;AACH,OAFiB,CAAlB;AAGA,YAAMY,QAAQ,GAAG,CAAC,GAAGH,SAAJ,EAAe;AAACT,QAAAA,QAAD;AAAWC,QAAAA;AAAX,OAAf,CAAjB,CALJ,CAOI;AACA;AACA;AACA;AACA;AACQ;AACJ;AACJ;AACA;;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA;;AACJ,SAAK,WAAL;AACID,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA;;AACJ,SAAK,OAAL;AACID,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA;;AACJ;AACI;AA1BR;AA4BH,CA9BM","sourcesContent":["import {getRopesOrder} from \"./selectors\";\nimport {addRopeToOrder} from \"./actions\";\n\nexport const addRopeOrder = (color_id, quantity, ropesOrder) => dispatch => {\n    if (ropesOrder) {\n        const order = {}\n        dispatch(addRopeToOrder(color_id, quantity))\n    }\n}\n\nexport const ropesOrderOperation = (order, quantityAction, color_id, quantity) => dispatch => {\n\n    switch (quantityAction) {\n        case 'increment':\n            console.log(order);\n            const prevOrder = order.filter((item) => {\n                return item.color_id === color_id\n            });\n            const newOrder = [...prevOrder, {color_id, quantity}]\n\n            // dispatch(addRopeToOrder(newOrder));\n            // order.forEach(item => {\n            //     if (item.color_id === color_id) {\n            //         console.log('remove');\n            //\n                    // dispatch(addRopeToOrder({color_id, quantity}))\n                // }\n            // })\n            // dispatch(addRopeToOrder({color_id, quantity}))\n            console.log('+');\n            return;\n        case 'decrement':\n            console.log('-');\n            return;\n        case 'input':\n            console.log('+-');\n            return;\n        default:\n            return;\n    }\n}"]},"metadata":{},"sourceType":"module"}